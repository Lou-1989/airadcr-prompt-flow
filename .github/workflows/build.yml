name: 'Build AIRADCR'

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  release:
    types: [ published ]

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        settings:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.settings.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.settings.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build all required icons (robust)
        run: node scripts/build-icons-robust.cjs

      - name: Validate all icons and assets  
        run: node scripts/validate-icons.cjs

      - name: Setup eSigner CodeSignTool (Windows only)
        if: matrix.settings.platform == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "üì¶ T√©l√©chargement de CodeSignTool..."
          
          # T√©l√©charger CodeSignTool depuis SSL.com
          $url = "https://www.ssl.com/download/codesigntool-for-windows/"
          $output = "$env:TEMP\CodeSignTool.zip"
          Invoke-WebRequest -Uri $url -OutFile $output
          
          # Extraire dans C:\CodeSignTool
          Write-Host "üìÇ Installation de CodeSignTool..."
          Expand-Archive -Path $output -DestinationPath "C:\CodeSignTool" -Force
          
          # V√©rifier l'installation
          if (Test-Path "C:\CodeSignTool\CodeSignTool.bat") {
            Write-Host "‚úÖ CodeSignTool install√© avec succ√®s"
          } else {
            Write-Error "‚ùå √âchec de l'installation de CodeSignTool"
            exit 1
          }

      - name: Build the app
        run: npx tauri build ${{ matrix.settings.args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign Windows binaries with eSigner
        if: matrix.settings.platform == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "üîè SIGNATURE DES BINAIRES WINDOWS"
          Write-Host "=================================="
          
          # Configuration des credentials eSigner
          $username = "${{ secrets.ESIGNER_USERNAME }}"
          $password = "${{ secrets.ESIGNER_PASSWORD }}"
          $totpSecret = "${{ secrets.ESIGNER_TOTP_SECRET }}"
          $credentialId = "${{ secrets.CREDENTIAL_ID }}"
          
          # Liste des fichiers √† signer
          $filesToSign = @(
            "src-tauri\target\release\airadcr-desktop.exe",
            "src-tauri\target\release\bundle\msi\*.msi",
            "src-tauri\target\release\bundle\nsis\*.exe"
          )
          
          $signedCount = 0
          $failedCount = 0
          
          foreach ($pattern in $filesToSign) {
            $files = Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue
            
            foreach ($file in $files) {
              Write-Host ""
              Write-Host "üîê Signature de: $($file.Name)"
              
              try {
                # Signature avec CodeSignTool
                C:\CodeSignTool\CodeSignTool.bat sign `
                  -username="$username" `
                  -password="$password" `
                  -credential_id="$credentialId" `
                  -totp_secret="$totpSecret" `
                  -input_file_path="$($file.FullName)" `
                  -override=true
                
                # V√©rification de la signature
                $signature = Get-AuthenticodeSignature $file.FullName
                
                if ($signature.Status -eq 'Valid') {
                  Write-Host "  ‚úÖ Signature valide"
                  Write-Host "  üìã Signataire: $($signature.SignerCertificate.Subject)"
                  $signedCount++
                } else {
                  Write-Host "  ‚ö†Ô∏è  Status: $($signature.Status)"
                  $failedCount++
                }
              } catch {
                Write-Error "  ‚ùå √âchec de la signature: $_"
                $failedCount++
              }
            }
          }
          
          Write-Host ""
          Write-Host "=================================="
          Write-Host "üìä R√âSUM√â DE LA SIGNATURE"
          Write-Host "  ‚úÖ Fichiers sign√©s: $signedCount"
          Write-Host "  ‚ùå √âchecs: $failedCount"
          Write-Host "=================================="
          
          if ($failedCount -gt 0) {
            Write-Error "‚ùå Certains fichiers n'ont pas pu √™tre sign√©s"
            exit 1
          }
          
          if ($signedCount -eq 0) {
            Write-Error "‚ùå Aucun fichier n'a √©t√© sign√©"
            exit 1
          }
          
          Write-Host "üéâ Tous les binaires Windows sont sign√©s!"

      - name: Verify and report code signatures (Windows)
        if: matrix.settings.platform == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "üìã RAPPORT D√âTAILL√â DES SIGNATURES"
          Write-Host "===================================="
          
          $allFiles = Get-ChildItem -Path "src-tauri\target\release\" -Include "*.exe","*.msi" -Recurse -ErrorAction SilentlyContinue
          
          foreach ($file in $allFiles) {
            Write-Host ""
            Write-Host "üìÑ Fichier: $($file.Name)"
            Write-Host "   Chemin: $($file.FullName)"
            
            $sig = Get-AuthenticodeSignature $file.FullName
            
            Write-Host "   üîê Status: $($sig.Status)"
            
            if ($sig.SignerCertificate) {
              Write-Host "   üë§ Signataire: $($sig.SignerCertificate.Subject)"
              Write-Host "   üîë Thumbprint: $($sig.SignerCertificate.Thumbprint)"
              Write-Host "   üìÖ Valide du: $($sig.SignerCertificate.NotBefore)"
              Write-Host "   üìÖ Valide jusqu'au: $($sig.SignerCertificate.NotAfter)"
              Write-Host "   üè¢ √âmetteur: $($sig.SignerCertificate.Issuer)"
              
              if ($sig.TimeStamperCertificate) {
                Write-Host "   ‚è∞ Timestamp: $($sig.TimeStamperCertificate.NotBefore)"
              }
            } else {
              Write-Host "   ‚ö†Ô∏è  Aucune signature trouv√©e!"
            }
          }
          
          Write-Host ""
          Write-Host "===================================="

      - name: Debug bundle contents (Windows)
        if: matrix.settings.platform == 'windows-latest'
        run: |
          echo "Listing Windows bundle directory contents:"
          if (Test-Path "src-tauri/target/release/bundle/") { Get-ChildItem -Path "src-tauri/target/release/bundle/" -Recurse } else { echo "Bundle directory not found" }
          Get-ChildItem -Path "src-tauri/target/" -Include "*.exe","*.msi" -Recurse -ErrorAction SilentlyContinue
        shell: powershell

      - name: Debug bundle contents (Unix)
        if: matrix.settings.platform != 'windows-latest'
        run: |
          echo "Listing bundle directory contents:"
          ls -la src-tauri/target/release/bundle/ || echo "Bundle directory not found"
          find src-tauri/target/ -name "*.exe" -o -name "*.msi" -o -name "*.dmg" -o -name "*.deb" -o -name "*.AppImage" || echo "No build artifacts found"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        if: matrix.settings.platform == 'windows-latest'
        with:
          name: build-windows-latest
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/*.exe
          retention-days: 30

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        if: matrix.settings.platform == 'macos-latest'
        with:
          name: build-macos-${{ contains(matrix.settings.args, 'aarch64') && 'arm64' || 'intel' }}
          path: |
            src-tauri/target/*/release/bundle/dmg/*.dmg
            src-tauri/target/*/release/bundle/macos/*.app
          retention-days: 30

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        if: matrix.settings.platform == 'ubuntu-22.04'
        with:
          name: build-ubuntu-22.04
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
          retention-days: 30