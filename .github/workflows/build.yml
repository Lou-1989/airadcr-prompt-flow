name: 'Build AIRADCR'

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  release:
    types: [ published ]

jobs:
  build:
    permissions:
      contents: write
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        settings:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.settings.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.settings.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build all required icons (robust)
        run: node scripts/build-icons-robust.cjs

      - name: Validate all icons and assets  
        run: node scripts/validate-icons.cjs

      - name: Build the app
        run: npx tauri build ${{ matrix.settings.args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug Tauri build output (Windows)
        if: matrix.settings.platform == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "[DEBUG] Tauri build verification"
          Write-Host "===================================="
          
          Write-Host ""
          Write-Host "[1] Release directory contents:"
          if (Test-Path "src-tauri/target/release/") {
            Get-ChildItem -Path "src-tauri/target/release/" -Filter "*.exe" | ForEach-Object {
              $sizeMB = [math]::Round($_.Length / 1MB, 2)
              Write-Host ("  [EXE] {0} - {1} MB" -f $_.Name, $sizeMB)
            }
          } else {
            Write-Host "  [ERROR] Release directory not found!"
          }
          
          Write-Host ""
          Write-Host "[2] Bundle artifacts (MSI + NSIS):"
          if (Test-Path "src-tauri/target/release/bundle/") {
            Get-ChildItem -Path "src-tauri/target/release/bundle/" -Recurse -Include "*.msi","*.exe" | ForEach-Object {
              $sizeMB = [math]::Round($_.Length / 1MB, 2)
              $relPath = $_.FullName.Replace("$PWD\", "")
              Write-Host ("  [BUNDLE] {0} - {1} MB" -f $relPath, $sizeMB)
            }
          } else {
            Write-Host "  [ERROR] Bundle directory not found!"
          }
          
          Write-Host ""
          Write-Host "===================================="

      - name: Pre-check files before signing (Windows)
        if: matrix.settings.platform == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "[PRE-CHECK] Files to be signed"
          Write-Host "=================================="
          
          Write-Host ""
          Write-Host "[SEARCH] AIRADCR.exe:"
          if (Test-Path "src-tauri\target\release\AIRADCR.exe") {
            $exe = Get-Item "src-tauri\target\release\AIRADCR.exe"
            $exeSizeMB = [math]::Round($exe.Length / 1MB, 2)
            Write-Host "  [OK] Found: $($exe.FullName)"
            Write-Host ("  [SIZE] {0} MB" -f $exeSizeMB)
          } else {
            Write-Host "  [ERROR] NOT FOUND"
          }
          
          Write-Host ""
          Write-Host "[SEARCH] MSI files:"
          $msiFiles = Get-ChildItem -Path "src-tauri\target\release\bundle\msi\*.msi" -ErrorAction SilentlyContinue
          if ($msiFiles) {
            Write-Host "  [OK] Found $($msiFiles.Count) file(s):"
            foreach ($msi in $msiFiles) {
              $msiSizeMB = [math]::Round($msi.Length / 1MB, 2)
              Write-Host ("    - {0} ({1} MB)" -f $msi.Name, $msiSizeMB)
            }
          } else {
            Write-Host "  [ERROR] NO MSI FOUND"
          }
          
          Write-Host ""
          Write-Host "[SEARCH] NSIS files:"
          $nsisFiles = Get-ChildItem -Path "src-tauri\target\release\bundle\nsis\*.exe" -ErrorAction SilentlyContinue
          if ($nsisFiles) {
            Write-Host "  [OK] Found $($nsisFiles.Count) file(s):"
            foreach ($nsis in $nsisFiles) {
              $nsisSizeMB = [math]::Round($nsis.Length / 1MB, 2)
              Write-Host ("    - {0} ({1} MB)" -f $nsis.Name, $nsisSizeMB)
            }
          } else {
            Write-Host "  [ERROR] NO NSIS FOUND"
          }
          
          Write-Host ""
          Write-Host "=================================="

      - name: Check SSL.com secrets presence (Windows)
        if: matrix.settings.platform == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "[SSL.com] Checking secrets presence..."
          
          $allPresent = $true
          
          if ([string]::IsNullOrEmpty("${{ secrets.ESIGNER_USERNAME }}")) {
            Write-Host "[ERROR] ESIGNER_USERNAME is missing or empty"
            $allPresent = $false
          } else {
            Write-Host "[OK] ESIGNER_USERNAME is present"
          }
          
          if ([string]::IsNullOrEmpty("${{ secrets.ESIGNER_PASSWORD }}")) {
            Write-Host "[ERROR] ESIGNER_PASSWORD is missing or empty"
            $allPresent = $false
          } else {
            Write-Host "[OK] ESIGNER_PASSWORD is present"
          }
          
          if ([string]::IsNullOrEmpty("${{ secrets.CREDENTIAL_ID }}")) {
            Write-Host "[ERROR] CREDENTIAL_ID is missing or empty"
            $allPresent = $false
          } else {
            Write-Host "[OK] CREDENTIAL_ID is present"
          }
          
          if ([string]::IsNullOrEmpty("${{ secrets.ESIGNER_TOTP_SECRET }}")) {
            Write-Host "[ERROR] ESIGNER_TOTP_SECRET is missing or empty"
            $allPresent = $false
          } else {
            Write-Host "[OK] ESIGNER_TOTP_SECRET is present"
          }
          
          if (-not $allPresent) {
            Write-Error "[FAILED] One or more SSL.com secrets are missing. Please check GitHub Secrets."
            exit 1
          }
          
          Write-Host "[SUCCESS] All SSL.com secrets are present"

      - name: eSigner - List credential IDs (login test)
        id: esigner_login_test
        if: matrix.settings.platform == 'windows-latest'
        timeout-minutes: 5
        continue-on-error: true
        uses: sslcom/esigner-codesign@develop
        with:
          command: get_credential_ids
          username: ${{ secrets.ESIGNER_USERNAME }}
          password: ${{ secrets.ESIGNER_PASSWORD }}
          totp_secret: ${{ secrets.ESIGNER_TOTP_SECRET }}
          environment_name: PROD
          clean_logs: false

      - name: eSigner - Credential info (validate CREDENTIAL_ID)
        if: matrix.settings.platform == 'windows-latest'
        timeout-minutes: 5
        continue-on-error: true
        uses: sslcom/esigner-codesign@develop
        with:
          command: credential_info
          username: ${{ secrets.ESIGNER_USERNAME }}
          password: ${{ secrets.ESIGNER_PASSWORD }}
          credential_id: ${{ secrets.CREDENTIAL_ID }}
          totp_secret: ${{ secrets.ESIGNER_TOTP_SECRET }}
          environment_name: PROD
          clean_logs: false

      - name: Sign main executable (Windows)
        if: matrix.settings.platform == 'windows-latest'
        timeout-minutes: 12
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.ESIGNER_USERNAME }}
          password: ${{ secrets.ESIGNER_PASSWORD }}
          credential_id: ${{ secrets.CREDENTIAL_ID }}
          totp_secret: ${{ secrets.ESIGNER_TOTP_SECRET }}
          file_path: ${{ github.workspace }}/src-tauri/target/release/AIRADCR.exe
          output_path: ${{ github.workspace }}/artifacts
          override: true
          environment_name: PROD
          clean_logs: false


      - name: Sign MSI installers (Windows)
        if: matrix.settings.platform == 'windows-latest' && hashFiles('src-tauri/target/release/bundle/msi/*.msi') != ''
        timeout-minutes: 12
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.ESIGNER_USERNAME }}
          password: ${{ secrets.ESIGNER_PASSWORD }}
          credential_id: ${{ secrets.CREDENTIAL_ID }}
          totp_secret: ${{ secrets.ESIGNER_TOTP_SECRET }}
          file_path: ${{ github.workspace }}/src-tauri/target/release/bundle/msi/*.msi
          output_path: ${{ github.workspace }}/artifacts
          override: true
          environment_name: PROD
          clean_logs: false


      - name: Sign NSIS installers (Windows)
        if: matrix.settings.platform == 'windows-latest' && hashFiles('src-tauri/target/release/bundle/nsis/*.exe') != ''
        timeout-minutes: 12
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.ESIGNER_USERNAME }}
          password: ${{ secrets.ESIGNER_PASSWORD }}
          credential_id: ${{ secrets.CREDENTIAL_ID }}
          totp_secret: ${{ secrets.ESIGNER_TOTP_SECRET }}
          file_path: ${{ github.workspace }}/src-tauri/target/release/bundle/nsis/*.exe
          output_path: ${{ github.workspace }}/artifacts
          override: true
          environment_name: PROD
          clean_logs: false

      - name: Collect CodeSignTool logs on failure (Windows)
        if: failure() && matrix.settings.platform == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "[DEBUG] Searching for CodeSignTool logs..."
          $logPath = "codesign\CodeSignTool-v1.3.0\logs"
          if (Test-Path $logPath) {
            Get-ChildItem -Path $logPath -Recurse | ForEach-Object {
              Write-Host ""
              Write-Host "[LOG FILE] $($_.Name):"
              Get-Content $_.FullName -Tail 200
            }
          } else {
            Write-Host "[WARNING] No logs found in $logPath"
          }

      - name: Verify code signatures (Windows)
        if: matrix.settings.platform == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "[VERIFY] Code signature verification"
          Write-Host "================================"
          
          $files = Get-ChildItem -Path "src-tauri\target\release\" -Include "*.exe","*.msi" -Recurse
          
          $validCount = 0
          $invalidCount = 0
          
          foreach ($file in $files) {
            $sig = Get-AuthenticodeSignature $file.FullName
            
            if ($sig.Status -eq 'Valid') {
              Write-Host "[OK] {0}: Signature valid" -f $file.Name
              Write-Host "     Signer: {0}" -f $sig.SignerCertificate.Subject
              $validCount++
            } else {
              Write-Host "[ERROR] {0}: Status {1}" -f $file.Name, $sig.Status
              $invalidCount++
            }
          }
          
          Write-Host ""
          Write-Host "================================"
          Write-Host "[SUMMARY]"
          Write-Host "  Valid signatures: $validCount"
          Write-Host "  Invalid signatures: $invalidCount"
          Write-Host "================================"
          
          if ($invalidCount -gt 0) {
            Write-Error "[FAILED] Some files are not properly signed"
            exit 1
          }

      - name: Debug bundle contents (Windows)
        if: matrix.settings.platform == 'windows-latest'
        run: |
          echo "Listing Windows bundle directory contents:"
          if (Test-Path "src-tauri/target/release/bundle/") { Get-ChildItem -Path "src-tauri/target/release/bundle/" -Recurse } else { echo "Bundle directory not found" }
          Get-ChildItem -Path "src-tauri/target/" -Include "*.exe","*.msi" -Recurse -ErrorAction SilentlyContinue
        shell: powershell

      - name: Debug bundle contents (Unix)
        if: matrix.settings.platform != 'windows-latest'
        run: |
          echo "Listing bundle directory contents:"
          ls -la src-tauri/target/release/bundle/ || echo "Bundle directory not found"
          find src-tauri/target/ -name "*.exe" -o -name "*.msi" -o -name "*.dmg" -o -name "*.deb" -o -name "*.AppImage" || echo "No build artifacts found"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        if: matrix.settings.platform == 'windows-latest'
        with:
          name: build-windows-latest
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/*.exe
          retention-days: 30

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        if: matrix.settings.platform == 'macos-latest'
        with:
          name: build-macos-${{ contains(matrix.settings.args, 'aarch64') && 'arm64' || 'intel' }}
          path: |
            src-tauri/target/*/release/bundle/dmg/*.dmg
            src-tauri/target/*/release/bundle/macos/*.app
          retention-days: 30

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        if: matrix.settings.platform == 'ubuntu-22.04'
        with:
          name: build-ubuntu-22.04
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
          retention-days: 30